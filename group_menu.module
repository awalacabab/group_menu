<?php

/**
 * @file
 * Enables Group functionality for the Menu module.
 */

use Drupal\group\Entity\Group;
use Drupal\group\Entity\GroupContentType;
use Drupal\group_menu\Entity\GroupMenu;
use Drupal\system\MenuInterface;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Database\Database;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\menu_link_content\Entity\MenuLinkContent;

/**
 * Implements hook_entity_type_alter().
 */
function group_menu_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  // Add the menu creation wizard steps as entity forms.
  $entity_types['menu']->setFormClass('group_menu-form', 'Drupal\group_menu\Form\GroupMenuFormStep1');
  $entity_types['group_menu']->setFormClass('group_menu-form', 'Drupal\group_menu\Form\GroupMenuFormStep2');
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function group_menu_menu_insert(MenuInterface $menu) {
  \Drupal::service('plugin.manager.group_content_enabler')->clearCachedDefinitions();
}

function group_menu_menu_link_content_access(MenuLinkContent $menu_link, $op, AccountInterface $account) {
  return AccessResult::allowed();
}

/**
 * Implements hook_entity_access().
 *
 * When trying to view, update or delete a menu it suffices to have the right to
 * do so in only one group the menu belongs to. If you wish to prevent any such
 * action on your own terms, implement hook_menu_access() in your module.
 */
function group_menu_menu_access(MenuInterface $menu, $op, AccountInterface $account) {

  // We do not care about create access as we have our own wizard for that. Any
  // operation aside from 'view', 'update' and 'delete' is also unsupported.
   if (!in_array($op, ['view', 'update', 'delete'])) {
    return AccessResult::neutral();
  }

  // Only act if there are group content types for menus.
  $group_content_types = GroupContentType::loadByContentPluginId("group_menu:menu");
  if (empty($group_content_types)) {
    return AccessResult::neutral();
  }

  // Load all the group content for this menu.
  $group_contents = \Drupal::entityTypeManager()
    ->getStorage('group_menu')
    ->loadByProperties([
      'type' => array_keys($group_content_types),
      'entity_id' => $menu->id(),
    ]);

  // If the menu does not belong to any group, we have nothing to say.
  if (empty($group_contents)) {
    return AccessResult::neutral();
  }

  /** @var \Drupal\group\Entity\GroupInterface[] $groups */
  $groups = [];
  foreach ($group_contents as $group_content) {
    /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
    $group = $group_content->getGroup();
    $groups[$group->id()] = $group;
  }

  // From this point on you need group to allow you to perform the requested
  // operation. If you are not granted access for a node belonging to a group,
  // you should be denied access instead.
  switch ($op) {
    case 'view':
      foreach ($groups as $group) {
        if ($group->hasPermission("view group menus", $account)) {
          return AccessResult::allowed();
        }
      }
      break;

    case 'update':
      foreach ($groups as $group) {
        if ($group->hasPermission("edit group menus", $account)) {
          return AccessResult::allowed();
        }
      }
      break;

    case 'delete':
      foreach ($groups as $group) {
        if ($group->hasPermission("delete group menus", $account)) {
          return AccessResult::allowed();
        }
      }
      break;
  }

  return AccessResult::forbidden();
}

function group_menu_form_node_form_alter(&$form, FormStateInterface $form_state) {
  // From menu_ui_form_node_form_alter
  // Generate a list of possible parents (not including this link or descendants).
  // @todo This must be handled in a #process handler.
  $node = $form_state->getFormObject()->getEntity();
  $defaults = menu_ui_get_menu_link_defaults($node);
  /** @var \Drupal\node\NodeTypeInterface $node_type */
  $node_type = $node->type->entity;
  /** @var \Drupal\Core\Menu\MenuParentFormSelectorInterface $menu_parent_selector */
  $menu_parent_selector = \Drupal::service('menu.parent_form_selector');
  $menu_names = menu_ui_get_menus();
  $type_menus = $node_type->getThirdPartySetting('menu_ui', 'available_menus', array('main'));
  $available_menus = array();
  foreach ($type_menus as $menu) {
    $available_menus[$menu] = $menu_names[$menu];
  }

  // Group Menu addition
  $group_content_types = GroupContentType::loadByContentPluginId("group_menu:menu");
  if (!empty($group_content_types)) {
      $group_contents = \Drupal::entityTypeManager()
        ->getStorage('group_menu')
        ->loadByProperties([
          'type' => array_keys($group_content_types),
        ]);

      if (!empty($group_contents)) {
        foreach ($group_contents as $group_content) {
          /** @var \Drupal\group\Entity\GroupContentInterface $group_content */
          $group = $group_content->getGroup();

          $account = \Drupal::currentUser();
          if ($group->hasPermission('edit group menus', $account)) {
            $entity_id = $group_content->get('entity_id')->getValue()[0]['target_id'];
            $available_menus[$entity_id] = $group_content->get('label')->getValue()[0]['value'];
          }
        }
      }
  }

  // From menu_ui_form_node_form_alter
  if ($defaults['id']) {
    $default = $defaults['menu_name'] . ':' . $defaults['parent'];
  }
  else {
    $default = $node_type->getThirdPartySetting('menu_ui', 'parent', 'main:');
  }
  $parent_element = $menu_parent_selector->parentSelectElement($default, $defaults['id'], $available_menus);
  // If no possible parent menu items were found, there is nothing to display.
  if (empty($parent_element)) {
    return;
  }

  $form['menu']['link']['menu_parent'] = $parent_element;
}

// This doesn't work to override menu_ui_form_node_form_alter
// See: https://www.drupal.org/node/1123140, https://www.drupal.org/node/765860
// Instead, setting module weight with hook_install for now.
//
//function group_menu_module_implements_alter(&$implementations, $hook) {
//  if ($hook == 'form_node_form_alter') {
//    $group = $implementations['group_menu'];
//    unset($implementations['group_menu']);
//    $implementations['group_menu'] = $group;
//  }
//}
